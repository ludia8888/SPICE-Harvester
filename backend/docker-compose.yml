services:
  # PostgreSQL - Event Store Database
  postgres:
    image: postgres:15
    container_name: spice_postgres
    environment:
      - POSTGRES_USER=spiceadmin
      - POSTGRES_PASSWORD=spicepass123
      - POSTGRES_DB=spicedb
      - POSTGRES_INITDB_ARGS=--auth-host=trust --auth-local=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - spice_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spiceadmin -d spicedb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - Background Task Queue and Cache
  redis:
    image: redis:7-alpine
    container_name: spice_redis
    environment:
      - REDIS_PASSWORD=spicepass123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spice_network
    command: redis-server --requirepass spicepass123
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "spicepass123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch - Event Projections and Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: spice_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - http.host=0.0.0.0
      - transport.host=localhost
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - spice_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka - Event Streaming and Message Queue
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: spice_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: spice_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO - S3-compatible Object Storage for Instance Events
  minio:
    image: minio/minio:latest
    container_name: spice_minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - spice_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TerminusDB
  terminusdb:
    image: terminusdb/terminusdb-server:latest
    container_name: spice_terminusdb
    environment:
      - TERMINUSDB_ADMIN_PASS=${TERMINUSDB_ADMIN_PASS:-admin123}
      - TERMINUSDB_SERVER_NAME=${TERMINUSDB_SERVER_NAME:-SpiceTerminusDB}
      - TERMINUSDB_AUTOLOGIN=false
    ports:
      - "6363:6363"
    volumes:
      - terminusdb_data:/app/terminusdb/storage
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "true"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OMS (Ontology Management Service)
  oms:
    build:
      context: .
      dockerfile: ./oms/Dockerfile
    container_name: spice_oms
    environment:
      - TERMINUS_SERVER_URL=${TERMINUS_SERVER_URL:-http://terminusdb:6363}
      - TERMINUS_USER=${TERMINUS_USER:-admin}
      - TERMINUS_ACCOUNT=${TERMINUS_ACCOUNT:-admin}
      - TERMINUS_KEY=${TERMINUS_KEY:-${TERMINUSDB_ADMIN_PASS:-admin123}}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - USE_HTTPS=${USE_HTTPS:-false}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-}
      - VERIFY_SSL=${VERIFY_SSL:-false}
    ports:
      - "8000:8000"
    depends_on:
      terminusdb:
        condition: service_healthy
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    # volumes:
      # - ./shared:/app/shared  # No longer needed with proper package install

  # BFF (Backend for Frontend)
  bff:
    build:
      context: .
      dockerfile: ./bff/Dockerfile
    container_name: spice_bff
    environment:
      - OMS_BASE_URL=${OMS_BASE_URL:-http://oms:8000}
      - FUNNEL_BASE_URL=${FUNNEL_BASE_URL:-http://funnel:8003}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - USE_HTTPS=${USE_HTTPS:-false}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-}
      - VERIFY_SSL=${VERIFY_SSL:-false}
    ports:
      - "8002:8002"
    depends_on:
      oms:
        condition: service_healthy
      funnel:
        condition: service_healthy
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      # - ./shared:/app/shared  # No longer needed with proper package install
      - bff_data:/app/data

  # Funnel (Type Inference Service)
  funnel:
    build:
      context: .
      dockerfile: ./funnel/Dockerfile
    container_name: spice_funnel
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - USE_HTTPS=${USE_HTTPS:-false}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-}
      - VERIFY_SSL=${VERIFY_SSL:-false}
    ports:
      - "8004:8003"
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  # Message Relay Service (Outbox Pattern)
  message-relay:
    build:
      context: .
      dockerfile: ./message_relay/Dockerfile
    container_name: spice_message_relay
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-spiceadmin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-spicepass123}
      - POSTGRES_DB=${POSTGRES_DB:-spicedb}
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-29092}
      - MESSAGE_RELAY_BATCH_SIZE=${MESSAGE_RELAY_BATCH_SIZE:-100}
      - MESSAGE_RELAY_POLL_INTERVAL=${MESSAGE_RELAY_POLL_INTERVAL:-5}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - oms
    networks:
      - spice_network
    restart: unless-stopped
    
  # Ontology Worker Service (Command Processing)
  ontology-worker:
    build:
      context: .
      dockerfile: ./ontology_worker/Dockerfile
    container_name: spice_ontology_worker
    environment:
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-29092}
      - TERMINUS_SERVER_URL=${TERMINUS_SERVER_URL:-http://terminusdb:6363}
      - TERMINUS_USER=${TERMINUS_USER:-admin}
      - TERMINUS_ACCOUNT=${TERMINUS_ACCOUNT:-admin}
      - TERMINUS_KEY=${TERMINUS_KEY:-${TERMINUSDB_ADMIN_PASS:-admin123}}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - terminusdb
      - message-relay
    networks:
      - spice_network
    restart: unless-stopped

  instance-worker:
    build:
      context: .
      dockerfile: ./instance_worker/Dockerfile
    container_name: spice_instance_worker
    environment:
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-29092}
      - TERMINUS_SERVER_URL=${TERMINUS_SERVER_URL:-http://terminusdb:6363}
      - TERMINUS_USER=${TERMINUS_USER:-admin}
      - TERMINUS_ACCOUNT=${TERMINUS_ACCOUNT:-admin}
      - TERMINUS_KEY=${TERMINUS_KEY:-${TERMINUSDB_ADMIN_PASS:-admin123}}
      - MINIO_ENDPOINT_URL=${MINIO_ENDPOINT_URL:-http://minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - INSTANCE_BUCKET=${INSTANCE_BUCKET:-instance-events}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - terminusdb
      - message-relay
    networks:
      - spice_network
    restart: unless-stopped

  # Projection Worker Service (Event Sourcing to Elasticsearch)
  projection-worker:
    build:
      context: .
      dockerfile: ./projection_worker/Dockerfile
    container_name: spice_projection_worker
    environment:
      - KAFKA_HOST=${KAFKA_HOST:-kafka}
      - KAFKA_PORT=${KAFKA_PORT:-29092}
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-elasticsearch}
      - ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT:-9200}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-elasticpass123}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-spicepass123}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - message-relay
    networks:
      - spice_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  terminusdb_data:
  bff_data:

networks:
  spice_network:
    driver: bridge