version: '3.8'

services:
  # PostgreSQL - 표준화된 인증 정보
  postgres:
    image: postgres:15
    container_name: spice_postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=spice123!
      - POSTGRES_DB=spicedb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - spice_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d spicedb"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - 표준화된 인증 정보
  redis:
    image: redis:7-alpine
    container_name: spice_redis
    command: redis-server --requirepass spice123!
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "spice123!", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch - 표준화된 인증 정보
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: spice_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_PASSWORD=spice123!
      - bootstrap.memory_lock=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.host=0.0.0.0
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - spice_network
    healthcheck:
      test: ["CMD-SHELL", "curl -u elastic:spice123! -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: spice_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: spice_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO - 표준화된 인증 정보
  minio:
    image: minio/minio:latest
    container_name: spice_minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=spice123!
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - spice_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TerminusDB - 표준화된 인증 정보
  terminusdb:
    image: terminusdb/terminusdb-server:latest
    container_name: spice_terminusdb
    environment:
      - TERMINUSDB_ADMIN_PASS=spice123!
      - TERMINUSDB_SERVER_NAME=SpiceTerminusDB
      - TERMINUSDB_AUTOLOGIN=false
    ports:
      - "6363:6363"
    volumes:
      - terminusdb_data:/app/terminusdb/storage
    networks:
      - spice_network
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/terminusdb/storage/SYSTEM/system.db || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OMS (Ontology Management Service) - 표준화된 인증 정보
  oms:
    build:
      context: .
      dockerfile: ./oms/Dockerfile
    container_name: spice_oms
    environment:
      # TerminusDB
      - TERMINUS_SERVER_URL=http://terminusdb:6363
      - TERMINUS_USER=admin
      - TERMINUS_ACCOUNT=admin
      - TERMINUS_KEY=spice123!
      # PostgreSQL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=spice123!
      - POSTGRES_DB=spicedb
      # Kafka
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=spice123!
      # Elasticsearch
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=spice123!
      # Service
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    ports:
      - "8000:8000"
    depends_on:
      - terminusdb
      - postgres
      - redis
      - elasticsearch
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # BFF
  bff:
    build:
      context: .
      dockerfile: ./bff/Dockerfile
    container_name: spice_bff
    environment:
      - OMS_BASE_URL=http://oms:8000
      - FUNNEL_BASE_URL=http://funnel:8003
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    ports:
      - "8002:8002"
    depends_on:
      - oms
      - funnel
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Funnel
  funnel:
    build:
      context: .
      dockerfile: ./funnel/Dockerfile
    container_name: spice_funnel
    environment:
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    ports:
      - "8003:8003"
    networks:
      - spice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Relay - 표준화된 인증 정보
  message-relay:
    build:
      context: .
      dockerfile: ./message_relay/Dockerfile
    container_name: spice_message_relay
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=spice123!
      - POSTGRES_DB=spicedb
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - MESSAGE_RELAY_BATCH_SIZE=100
      - MESSAGE_RELAY_POLL_INTERVAL=5
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    depends_on:
      - postgres
      - kafka
    networks:
      - spice_network
    restart: unless-stopped

  # Ontology Worker - 표준화된 인증 정보
  ontology-worker:
    build:
      context: .
      dockerfile: ./ontology_worker/Dockerfile
    container_name: spice_ontology_worker
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - TERMINUS_SERVER_URL=http://terminusdb:6363
      - TERMINUS_USER=admin
      - TERMINUS_ACCOUNT=admin
      - TERMINUS_KEY=spice123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=spice123!
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    depends_on:
      - terminusdb
      - kafka
      - redis
    networks:
      - spice_network
    restart: unless-stopped

  # Instance Worker - 표준화된 인증 정보
  instance-worker:
    build:
      context: .
      dockerfile: ./instance_worker/Dockerfile
    container_name: spice_instance_worker
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - TERMINUS_SERVER_URL=http://terminusdb:6363
      - TERMINUS_USER=admin
      - TERMINUS_ACCOUNT=admin
      - TERMINUS_KEY=spice123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=spice123!
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=spice123!
      - MINIO_ENDPOINT_URL=http://minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=spice123!
      - INSTANCE_BUCKET=instance-events
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    depends_on:
      - terminusdb
      - kafka
      - elasticsearch
      - minio
    networks:
      - spice_network
    restart: unless-stopped

  # Projection Worker - 표준화된 인증 정보
  projection-worker:
    build:
      context: .
      dockerfile: ./projection_worker/Dockerfile
    container_name: spice_projection_worker
    environment:
      - KAFKA_HOST=kafka
      - KAFKA_PORT=29092
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=spice123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=spice123!
      - LOG_LEVEL=INFO
      - DOCKER_CONTAINER=true
    depends_on:
      - kafka
      - elasticsearch
      - redis
    networks:
      - spice_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  terminusdb_data:

networks:
  spice_network:
    driver: bridge