[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spice-harvester"
version = "1.0.0"
description = "SPICE HARVESTER - 온톨로지 기반 데이터 관리 시스템"
authors = [
    {name = "SPICE HARVESTER Team", email = "team@spice-harvester.com"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

# 🎯 SPICE HARVESTER Meta Package - DUPLICATE DEPENDENCIES RESOLVED!
#
# ❌ 이전: 개별 라이브러리 버전을 여기서 중복 관리 → shared와 버전 충돌
# ✅ 현재: shared 패키지를 참조하는 메타 패키지로 역할 변경
#
# 이 패키지의 새로운 역할:
# - 개발/테스트용 메타 패키지
# - 모든 서비스의 공통 의존성은 shared/pyproject.toml에서 관리
# - CI/CD 및 전체 프로젝트 빌드를 위한 엔트리포인트

dependencies = [
    # 🔗 Shared package - 모든 외부 의존성의 단일 진실 공급원
    "-e ./shared",
]

[project.optional-dependencies]
# 🔗 모든 개발/테스트 의존성은 shared 패키지에서 중앙관리
dev = [
    "-e ./shared[dev]",   # shared의 개발 의존성 사용
]

test = [
    "-e ./shared[test]",  # shared의 테스트 의존성 사용
    "psutil>=5.9.0",     # 프로젝트 전체 성능 테스트용 추가 라이브러리
]

# 🎯 전체 프로젝트 개발 환경 설정
all = [
    "-e ./shared[dev,test,docs]",  # 모든 의존성 포함
    "psutil>=5.9.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["bff*", "oms*", "funnel*", "data_connector*", "shared*"]
exclude = ["tests*", "docs*", "scripts*", "backup*"]

[tool.setuptools.package-data]
"*" = ["**/*.json", "**/*.yaml", "**/*.yml", "**/*.html", "**/*.css"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "tests/",
    "migrations/",
    "venv/",
    "build/",
    "dist/",
]

[tool.coverage.run]
source = ["bff", "oms", "funnel", "data_connector", "shared"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]