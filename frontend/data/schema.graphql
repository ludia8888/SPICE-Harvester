# SPICE HARVESTER GraphQL Schema
# This follows Palantir Foundry's ontology structure

scalar DateTime
scalar JSON
scalar UUID

# Enums
enum ObjectTypeStatus {
  ACTIVE
  EXPERIMENTAL
  DEPRECATED
}

enum PropertyVisibility {
  PROMINENT
  NORMAL
  HIDDEN
}

enum PropertyBaseType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  DATE
  DATETIME
  JSON
  BINARY
  REFERENCE
}

enum LinkJoinType {
  FOREIGN_KEY
  DATASET
  OBJECT_BACKED
}

enum ActionStatus {
  ACTIVE
  DISABLED
  DEPRECATED
}

# Interfaces
interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

interface Lockable {
  isLocked: Boolean!
  lockedBy: User
  lockedAt: DateTime
}

interface Versionable {
  version: Int!
  versionHistory: [Version!]!
}

# Core Types
type User implements Node {
  id: ID!
  username: String!
  email: String!
  displayName: String!
  avatar: String
  roles: [Role!]!
  groups: [Group!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Role implements Node {
  id: ID!
  name: String!
  description: String
  permissions: [Permission!]!
  users: [User!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Permission {
  id: ID!
  resource: String!
  action: String!
  effect: String!
}

type Group implements Node {
  id: ID!
  name: String!
  description: String
  icon: String
  color: String
  users: [User!]!
  objectTypes: [ObjectType!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

# Ontology Types
type ObjectType implements Node & Lockable & Versionable {
  id: ID!
  apiName: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  icon: String
  color: String
  status: ObjectTypeStatus!
  groups: [Group!]!
  properties: [Property!]!
  primaryKey: Property!
  titleKey: Property
  linkTypes: [LinkType!]!
  actions: [Action!]!
  datasources: [Datasource!]!
  statistics: ObjectTypeStatistics!
  isLocked: Boolean!
  lockedBy: User
  lockedAt: DateTime
  version: Int!
  versionHistory: [Version!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Property implements Node {
  id: ID!
  apiName: String!
  displayName: String!
  description: String
  baseType: PropertyBaseType!
  isRequired: Boolean!
  isUnique: Boolean!
  isPrimaryKey: Boolean!
  isTitleKey: Boolean!
  visibility: PropertyVisibility!
  status: ObjectTypeStatus!
  formatting: PropertyFormatting
  validation: PropertyValidation
  mappings: [PropertyMapping!]!
  objectType: ObjectType!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type LinkType implements Node & Lockable & Versionable {
  id: ID!
  apiName: String!
  displayName: String!
  reverseDisplayName: String!
  description: String
  icon: String
  color: String
  joinType: LinkJoinType!
  sourceObjectType: ObjectType!
  targetObjectType: ObjectType!
  sourceProperty: Property
  targetProperty: Property
  joinDataset: Dataset
  cardinality: String!
  status: ObjectTypeStatus!
  isLocked: Boolean!
  lockedBy: User
  lockedAt: DateTime
  version: Int!
  versionHistory: [Version!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Action implements Node & Versionable {
  id: ID!
  apiName: String!
  displayName: String!
  description: String
  icon: String
  status: ActionStatus!
  objectType: ObjectType!
  parameters: [ActionParameter!]!
  function: Function!
  permissions: [Permission!]!
  version: Int!
  versionHistory: [Version!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Function implements Node & Versionable {
  id: ID!
  apiName: String!
  displayName: String!
  description: String
  code: String!
  language: String!
  inputs: [FunctionInput!]!
  outputs: [FunctionOutput!]!
  version: Int!
  versionHistory: [Version!]!
  actions: [Action!]!
  usageHistory: [FunctionUsage!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

# Data Types
type Dataset implements Node {
  id: ID!
  name: String!
  description: String
  schema: DatasetSchema!
  statistics: DatasetStatistics!
  datasource: Datasource!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type Datasource implements Node {
  id: ID!
  name: String!
  type: String!
  connectionString: String!
  datasets: [Dataset!]!
  objectTypes: [ObjectType!]!
  status: String!
  lastSyncedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

# Supporting Types
type PropertyFormatting {
  type: String!
  config: JSON!
}

type PropertyValidation {
  rules: [ValidationRule!]!
}

type ValidationRule {
  type: String!
  config: JSON!
  message: String
}

type PropertyMapping {
  datasource: Datasource!
  dataset: Dataset!
  column: String!
  transformation: String
}

type ActionParameter {
  name: String!
  type: String!
  required: Boolean!
  defaultValue: String
  description: String
}

type FunctionInput {
  name: String!
  type: String!
  required: Boolean!
  description: String
}

type FunctionOutput {
  name: String!
  type: String!
  description: String
}

type FunctionUsage {
  id: ID!
  action: Action!
  executedAt: DateTime!
  executedBy: User!
  duration: Int!
  status: String!
  error: String
}

type DatasetSchema {
  columns: [DatasetColumn!]!
}

type DatasetColumn {
  name: String!
  type: String!
  nullable: Boolean!
  description: String
}

type DatasetStatistics {
  rowCount: Int!
  sizeInBytes: Int!
  lastUpdatedAt: DateTime!
}

type ObjectTypeStatistics {
  instanceCount: Int!
  propertyCount: Int!
  linkCount: Int!
  actionCount: Int!
  lastBuildAt: DateTime
  buildStatus: String
}

type Version {
  id: ID!
  version: Int!
  changes: JSON!
  createdAt: DateTime!
  createdBy: User!
  comment: String
}

# Proposals for change management
type Proposal implements Node {
  id: ID!
  title: String!
  description: String
  branch: String!
  status: String!
  changes: [ProposalChange!]!
  reviews: [ProposalReview!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User!
  updatedBy: User!
}

type ProposalChange {
  id: ID!
  changeType: String!
  resourceType: String!
  resourceId: String!
  before: JSON
  after: JSON!
}

type ProposalReview {
  id: ID!
  reviewer: User!
  status: String!
  comment: String
  reviewedAt: DateTime!
}

# Queries
type Query {
  # User queries
  me: User!
  user(id: ID!): User
  users(filter: UserFilter, pagination: PaginationInput): UserConnection!
  
  # Ontology queries
  objectType(id: ID!): ObjectType
  objectTypes(filter: ObjectTypeFilter, pagination: PaginationInput): ObjectTypeConnection!
  
  linkType(id: ID!): LinkType
  linkTypes(filter: LinkTypeFilter, pagination: PaginationInput): LinkTypeConnection!
  
  property(id: ID!): Property
  properties(objectTypeId: ID!, filter: PropertyFilter): [Property!]!
  
  action(id: ID!): Action
  actions(objectTypeId: ID!): [Action!]!
  
  function(id: ID!): Function
  functions(filter: FunctionFilter, pagination: PaginationInput): FunctionConnection!
  
  # Data queries
  dataset(id: ID!): Dataset
  datasets(filter: DatasetFilter, pagination: PaginationInput): DatasetConnection!
  
  datasource(id: ID!): Datasource
  datasources: [Datasource!]!
  
  # Proposal queries
  proposal(id: ID!): Proposal
  proposals(filter: ProposalFilter, pagination: PaginationInput): ProposalConnection!
  
  # Group queries
  group(id: ID!): Group
  groups: [Group!]!
}

# Mutations
type Mutation {
  # Object Type mutations
  createObjectType(input: CreateObjectTypeInput!): ObjectType!
  updateObjectType(id: ID!, input: UpdateObjectTypeInput!): ObjectType!
  deleteObjectType(id: ID!): Boolean!
  lockObjectType(id: ID!): ObjectType!
  unlockObjectType(id: ID!): ObjectType!
  
  # Property mutations
  createProperty(objectTypeId: ID!, input: CreatePropertyInput!): Property!
  updateProperty(id: ID!, input: UpdatePropertyInput!): Property!
  deleteProperty(id: ID!): Boolean!
  
  # Link Type mutations
  createLinkType(input: CreateLinkTypeInput!): LinkType!
  updateLinkType(id: ID!, input: UpdateLinkTypeInput!): LinkType!
  deleteLinkType(id: ID!): Boolean!
  
  # Action mutations
  createAction(objectTypeId: ID!, input: CreateActionInput!): Action!
  updateAction(id: ID!, input: UpdateActionInput!): Action!
  deleteAction(id: ID!): Boolean!
  
  # Function mutations
  createFunction(input: CreateFunctionInput!): Function!
  updateFunction(id: ID!, input: UpdateFunctionInput!): Function!
  deleteFunction(id: ID!): Boolean!
  
  # Proposal mutations
  createProposal(input: CreateProposalInput!): Proposal!
  updateProposal(id: ID!, input: UpdateProposalInput!): Proposal!
  reviewProposal(id: ID!, input: ReviewProposalInput!): Proposal!
  mergeProposal(id: ID!): Boolean!
  rejectProposal(id: ID!): Boolean!
}

# Subscriptions
type Subscription {
  # Real-time collaboration
  objectTypeUpdated(id: ID!): ObjectType!
  linkTypeUpdated(id: ID!): LinkType!
  propertyUpdated(id: ID!): Property!
  
  # Lock notifications
  objectTypeLocked(id: ID!): ObjectType!
  objectTypeUnlocked(id: ID!): ObjectType!
  
  # Proposal updates
  proposalUpdated(id: ID!): Proposal!
  
  # Build status updates
  buildStatusUpdated(objectTypeId: ID!): ObjectTypeStatistics!
}

# Input Types
input PaginationInput {
  limit: Int
  offset: Int
  cursor: String
}

input UserFilter {
  search: String
  roleIds: [ID!]
  groupIds: [ID!]
}

input ObjectTypeFilter {
  search: String
  status: ObjectTypeStatus
  groupIds: [ID!]
  hasInstances: Boolean
}

input LinkTypeFilter {
  search: String
  status: ObjectTypeStatus
  sourceObjectTypeId: ID
  targetObjectTypeId: ID
}

input PropertyFilter {
  search: String
  baseType: PropertyBaseType
  visibility: PropertyVisibility
  status: ObjectTypeStatus
}

input DatasetFilter {
  search: String
  datasourceId: ID
}

input FunctionFilter {
  search: String
  language: String
}

input ProposalFilter {
  status: String
  createdById: ID
  branch: String
}

input CreateObjectTypeInput {
  apiName: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  icon: String
  color: String
  groupIds: [ID!]
  datasourceId: ID
}

input UpdateObjectTypeInput {
  displayName: String
  pluralDisplayName: String
  description: String
  icon: String
  color: String
  status: ObjectTypeStatus
  groupIds: [ID!]
}

input CreatePropertyInput {
  apiName: String!
  displayName: String!
  description: String
  baseType: PropertyBaseType!
  isRequired: Boolean
  isUnique: Boolean
  isPrimaryKey: Boolean
  isTitleKey: Boolean
  visibility: PropertyVisibility
}

input UpdatePropertyInput {
  displayName: String
  description: String
  isRequired: Boolean
  isUnique: Boolean
  visibility: PropertyVisibility
  status: ObjectTypeStatus
  formatting: PropertyFormattingInput
  validation: PropertyValidationInput
}

input PropertyFormattingInput {
  type: String!
  config: JSON!
}

input PropertyValidationInput {
  rules: [ValidationRuleInput!]!
}

input ValidationRuleInput {
  type: String!
  config: JSON!
  message: String
}

input CreateLinkTypeInput {
  apiName: String!
  displayName: String!
  reverseDisplayName: String!
  description: String
  icon: String
  color: String
  joinType: LinkJoinType!
  sourceObjectTypeId: ID!
  targetObjectTypeId: ID!
  sourcePropertyId: ID
  targetPropertyId: ID
  joinDatasetId: ID
}

input UpdateLinkTypeInput {
  displayName: String
  reverseDisplayName: String
  description: String
  icon: String
  color: String
  status: ObjectTypeStatus
}

input CreateActionInput {
  apiName: String!
  displayName: String!
  description: String
  icon: String
  functionId: ID!
  parameters: [ActionParameterInput!]
}

input UpdateActionInput {
  displayName: String
  description: String
  icon: String
  status: ActionStatus
  parameters: [ActionParameterInput!]
}

input ActionParameterInput {
  name: String!
  type: String!
  required: Boolean!
  defaultValue: String
  description: String
}

input CreateFunctionInput {
  apiName: String!
  displayName: String!
  description: String
  code: String!
  language: String!
  inputs: [FunctionInputInput!]!
  outputs: [FunctionOutputInput!]!
}

input UpdateFunctionInput {
  displayName: String
  description: String
  code: String
  inputs: [FunctionInputInput!]
  outputs: [FunctionOutputInput!]
}

input FunctionInputInput {
  name: String!
  type: String!
  required: Boolean!
  description: String
}

input FunctionOutputInput {
  name: String!
  type: String!
  description: String
}

input CreateProposalInput {
  title: String!
  description: String
  branch: String!
}

input UpdateProposalInput {
  title: String
  description: String
}

input ReviewProposalInput {
  status: String!
  comment: String
}

# Connection Types for Pagination
type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

type ObjectTypeConnection {
  edges: [ObjectTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ObjectTypeEdge {
  node: ObjectType!
  cursor: String!
}

type LinkTypeConnection {
  edges: [LinkTypeEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LinkTypeEdge {
  node: LinkType!
  cursor: String!
}

type FunctionConnection {
  edges: [FunctionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FunctionEdge {
  node: Function!
  cursor: String!
}

type DatasetConnection {
  edges: [DatasetEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DatasetEdge {
  node: Dataset!
  cursor: String!
}

type ProposalConnection {
  edges: [ProposalEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProposalEdge {
  node: Proposal!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}